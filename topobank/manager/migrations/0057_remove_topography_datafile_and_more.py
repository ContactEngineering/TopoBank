# Generated by Django 4.2.15 on 2024-08-28 11:37
import math
import os

from django.db import migrations
from storages.utils import clean_name


def storage_prefix(instance):
    return f"topographies/{instance.id}"


def generate_manifest(
    name: str,
    nb_grid_pts: tuple[int, int],
    tile_size: int = 256,
    format: str = "jpg",
    meta_format: str = "xml",
):
    """
    Generate the file manifest, i.e. the list of files, that would be generated when
    writing the DZI.

    Parameters
    ----------
    name : str
        Name of the exported file. This is used as a prefix. Output filter
        create the file `name`.xml that contains the metadata and a directory
        `name`_files that contains the rendered image files at different levels.
    nb_grid_pts : tuple of ints
        Number of grid points.
    tile_size : int, optional
        Size of individual tiles. (Default: 256)
    format : str, optional
        Data output format. Note that PNG files have seams at the boundary between
        tiles. Use 'npy' to output raw data in the native numpy format.
        Use 'nc' to output raw data as NetCDF files. (Default: 'jpg')
    meta_format : str, optional
        Format for metadata information (the DZI file), can be 'xml' or
        'json'. (Default: 'xml')

    Returns
    -------
    manifest : list of str
        List with names of files created during write operation
    """

    # Image size
    width, height = nb_grid_pts

    # Write configuration file
    if meta_format == "xml":
        fn = name + ".xml"
    elif meta_format == "json":
        fn = name + ".json"
    else:
        raise ValueError(f"Unknown metadata format {meta_format}.")
    manifest = [fn]

    # Determine number of levels
    max_level = math.ceil(math.log2(max(width, height)))

    # Loop over levels and write tiles
    root_directory = name + "_files"
    for level in range(max_level, -1, -1):
        level_root_directory = os.path.join(root_directory, str(level))

        columns = math.ceil(width / tile_size)
        rows = math.ceil(height / tile_size)

        # Loop over all tiles
        for column in range(columns):
            for row in range(rows):
                # File name for this tile
                fn = os.path.join(level_root_directory, f"{column}_{row}.{format}")

                manifest += [fn]

        width = math.ceil(width / 2)
        height = math.ceil(height / 2)

    return manifest


def patch_storage_path(manifest, storage_path):
    manifest.file = manifest.file.field.attr_class(
        manifest, manifest.file.field, storage_path
    )
    manifest.save()


def forward_func(apps, schema_editor):
    Topography = apps.get_model("manager", "Topography")
    Manifest = apps.get_model("files", "Manifest")
    Folder = apps.get_model("files", "Folder")
    for topography in Topography.objects.all():
        topography.datafile_manifest = Manifest.objects.create(
            permissions=topography.permissions,
            filename=os.path.split(topography.datafile.name)[1],
            kind="raw",
            uploaded_by=topography.creator,
        )
        patch_storage_path(topography.datafile_manifest, topography.datafile.name)
        topography.squeezed_datafile_manifest = Manifest.objects.create(
            permissions=topography.permissions,
            filename=os.path.split(topography.squeezed_datafile.name)[1],
            kind="der",
            uploaded_by=topography.creator,
        )
        patch_storage_path(
            topography.squeezed_datafile_manifest, topography.squeezed_datafile.name
        )
        topography.thumbnail_manifest = Manifest.objects.create(
            permissions=topography.permissions,
            filename=os.path.split(topography.thumbnail.name)[1],
            kind="der",
            uploaded_by=topography.creator,
        )
        patch_storage_path(topography.thumbnail_manifest, topography.thumbnail.name)
        if topography.resolution_y:
            # 2D map
            nb_grid_pts = (topography.resolution_x, topography.resolution_y)
            deepzoom_files = generate_manifest("dzi", nb_grid_pts, meta_format="json")
            folder = Folder.objects.create(permissions=topography.permissions)
            for fn in deepzoom_files:
                manifest = Manifest.objects.create(
                    permissions=topography.permissions,
                    folder=folder,
                    # DZI files were under the "dzi" prefix
                    filename=os.path.join("dzi", fn),
                    kind="der",
                )
                # Manually patch storage location
                full_path = manifest.file.field.generate_filename(
                    manifest, clean_name(manifest.filename)
                )
                patch_storage_path(manifest, full_path)


class Migration(migrations.Migration):

    dependencies = [
        ("files", "0006_folder_read_only"),
        ("manager", "0056_topography_datafile_manifest_topography_deepzoom_and_more"),
    ]

    operations = [
        migrations.RunPython(forward_func),
        migrations.RemoveField(
            model_name="topography",
            name="datafile",
        ),
        migrations.RemoveField(
            model_name="topography",
            name="squeezed_datafile",
        ),
        migrations.RemoveField(
            model_name="topography",
            name="thumbnail",
        ),
    ]
